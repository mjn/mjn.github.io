{"version":3,"file":"component---src-templates-blog-post-index-tsx-c07175af628a9d67948f.js","mappings":"yMAEoBA,EAAAA,QAAAA,IAAAA,WAAH,uDAAGA,CAAH,QACX,uCAGiBA,EAAAA,QAAAA,IAAAA,WAAH,0DAAGA,CAAH,QACd,yCALC,MAQMC,EAAQD,EAAAA,QAAAA,GAAAA,WAAH,wDAAGA,CAAH,QACZ,4DAGOE,EAAOF,EAAAA,QAAAA,IAAAA,WAAH,uDAAGA,CAAH,QACX,wCAGOG,EAAMH,EAAAA,QAAAA,IAAAA,WAAH,sDAAGA,CAAH,QACV,0CAGOI,EAAQJ,EAAAA,QAAAA,IAAAA,WAAH,wDAAGA,CAAH,8CACZ,6CAGE,mGAIA,sBAIA,wJAIA,2DAGE,wBAKGK,EAAQL,EAAAA,QAAAA,IAAAA,WAAH,wDAAGA,CAAH,QACZ,+EAGOM,EAAON,EAAAA,QAAAA,KAAAA,WAAH,uDAAGA,CAAH,QACX,8EAGOO,EAAWP,EAAAA,QAAAA,KAAAA,WAAH,2DAAGA,CAAH,QACf,oOAGOQ,EAAYR,EAAAA,QAAAA,KAAAA,WAAH,4DAAGA,CAAH,MCmBtB,MA/CiB,IAAiC,IAAhC,KAACS,EAAD,YAAOC,GAAwB,EAC/C,MAAMC,EAAOF,EAAKG,gBACZ,KAACC,EAAD,KAAOC,GAAQJ,EAErB,OACE,gBAAC,KAAD,KACE,gBAAC,KAAD,CAAKK,MAAOJ,EAAKK,YAAYD,MAAOE,YAAaN,EAAKK,YAAYC,cAClE,gBAAC,EAAD,KAAeN,EAAKK,YAAYD,OAChC,gBAAC,EAAD,KAAcJ,EAAKK,YAAYE,MAC/B,gBAAC,EAAD,KACGP,EAAKK,YAAYG,QAChB,gBAAC,EAAD,KACE,gBAAC,KAAD,CAAKC,IAAKT,EAAKK,YAAYG,UAG/B,gBAAC,KAAD,CAAeE,QAASV,EAAKW,QAE/B,gBAAC,EAAD,KACE,gBAAC,EAAD,KACGR,GACC,gBAAC,KAAD,CAAMS,GAAIT,EAAKU,OAAOC,KAAMC,IAAI,YAAW,gBAAC,EAAD,UAA3C,IAAkF,gBAAC,EAAD,KAAkBZ,EAAKE,YAAYD,SAGzH,gBAAC,EAAD,KACGF,GACC,gBAAC,KAAD,CAAMU,GAAIV,EAAKW,OAAOC,KAAMC,IAAI,QAAO,gBAAC,EAAD,KAAkBb,EAAKG,YAAYD,OAA1E,IAAmG,gBAAC,EAAD","sources":["webpack://mjn.github.io/./src/templates/BlogPost/styles.ts","webpack://mjn.github.io/./src/templates/BlogPost/index.tsx"],"sourcesContent":["import tw, {styled} from 'twin.macro';\n\nexport const Post = styled.div`\n  ${tw`w-full flex-col`}\n`;\n\nexport const Heading = styled.div`\n  ${tw`flex flex-col`}\n`;\n\nexport const Title = styled.h1`\n  ${tw`font-semibold text-xl`}\n`;\n\nexport const Date = styled.div`\n  ${tw`text-xs`}\n`;\n\nexport const Map = styled.div`\n  ${tw`mt-2 mb-4`}\n`;\n\nexport const Entry = styled.div`\n  ${tw`clear-both w-full mt-4`}\n\n  h2 {\n    ${tw`font-semibold text-lg mt-4 mb-2`}\n  }\n\n  p {\n    ${tw`mb-4`}\n  }\n\n  code {\n    ${tw`bg-gray-200 rounded px-1`}\n  }\n\n  ul {\n    ${tw`mx-8 mb-4`}\n\n    li {\n      ${tw`list-disc`}\n    }\n  }\n`;\n\nexport const Links = styled.div`\n  ${tw`w-full flex justify-between mt-8`}\n`;\n\nexport const Link = styled.span`\n  ${tw`text-blue-500`}\n`;\n\nexport const LinkText = styled.span`\n  ${tw`hidden sm:inline shadow-link`}\n`;\n\nexport const LinkArrow = styled.span``;\n","import React from 'react';\nimport {graphql, Link} from 'gatsby';\nimport {Layout, FormattedHtml, Map, SEO} from '../../components';\n\nimport * as Styled from './styles';\n\ninterface Post {\n  html: React.ReactNode;\n  fields: {\n    slug: string;\n  };\n  frontmatter: {\n    title: string;\n    date: string;\n    description: string;\n    mapSrc?: string;\n  };\n}\n\ninterface Props {\n  data: {\n    markdownRemark: Post;\n  };\n  pageContext: {\n    slug: string;\n    next: Post;\n    prev: Post;\n  };\n}\n\nconst BlogPost = ({data, pageContext}: Props) => {\n  const post = data.markdownRemark;\n  const {next, prev} = pageContext;\n\n  return (\n    <Layout>\n      <SEO title={post.frontmatter.title} description={post.frontmatter.description} />\n      <Styled.Title>{post.frontmatter.title}</Styled.Title>\n      <Styled.Date>{post.frontmatter.date}</Styled.Date>\n      <Styled.Entry>\n        {post.frontmatter.mapSrc && (\n          <Styled.Map>\n            <Map src={post.frontmatter.mapSrc} />\n          </Styled.Map>\n        )}\n        <FormattedHtml content={post.html} />\n      </Styled.Entry>\n      <Styled.Links>\n        <Styled.Link>\n          {prev && (\n            <Link to={prev.fields.slug} rel=\"previous\"><Styled.LinkArrow>←</Styled.LinkArrow> <Styled.LinkText>{prev.frontmatter.title}</Styled.LinkText></Link>\n          )}\n        </Styled.Link>\n        <Styled.Link>\n          {next && (\n            <Link to={next.fields.slug} rel=\"next\"><Styled.LinkText>{next.frontmatter.title}</Styled.LinkText> <Styled.LinkArrow>→</Styled.LinkArrow></Link>\n          )}\n        </Styled.Link>\n      </Styled.Links>\n    </Layout>\n  )\n};\n\nexport const query = graphql`\n  query($slug: String!) {\n    markdownRemark(fields: { slug: {eq: $slug} }) {\n      html\n      frontmatter {\n        title\n        description\n        mapSrc\n        date(formatString: \"MMM D, YYYY\")\n      }\n    }\n  }\n`;\n\nexport default BlogPost;\n"],"names":["styled","Title","Date","Map","Entry","Links","Link","LinkText","LinkArrow","data","pageContext","post","markdownRemark","next","prev","title","frontmatter","description","date","mapSrc","src","content","html","to","fields","slug","rel"],"sourceRoot":""}